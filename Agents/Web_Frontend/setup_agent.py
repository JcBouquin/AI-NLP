"""
Script pour cr√©er et configurer l'agent Parlant avec les tools QNA et SQL
Ex√©cuter ce script AVANT de lancer le frontend web
"""

import asyncio
import sys
from pathlib import Path

# Ajouter le chemin parent pour importer parlant
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

try:
    import parlant.sdk as p
except ImportError:
    print("‚ùå Erreur: Le module 'parlant' n'est pas install√©")
    print("   Installez-le avec: pip install parlant")
    sys.exit(1)


async def create_medical_agent():
    """Cr√©er un agent m√©dical complet avec QNA et SQL"""
    
    print("üöÄ Cr√©ation de l'agent m√©dical...")
    print()
    
    try:
        async with p.Server() as server:
            # Cr√©er l'agent
            agent = await server.create_agent(
                name="Assistant M√©dical Web",
                description="Agent m√©dical accessible via interface web avec acc√®s FAQ et base de donn√©es"
            )
            
            print(f"‚úÖ Agent cr√©√© avec succ√®s !")
            print(f"   Nom: {agent.name}")
            print(f"   ID: {agent.id}")
            print()
            
            # === GLOSSAIRE ===
            print("üìö Ajout du glossaire...")
            
            await agent.create_term(
                name="Num√©ro du cabinet",
                description="Le num√©ro de t√©l√©phone du cabinet est le +33-1-23-45-67-89"
            )
            
            await agent.create_term(
                name="Horaires d'ouverture",
                description="Le cabinet est ouvert du lundi au vendredi de 9h √† 17h, ferm√© le week-end"
            )
            
            print("   ‚úÖ 2 termes ajout√©s au glossaire")
            print()
            
            # === GUIDELINES ===
            print("üìã Configuration des guidelines...")
            
            # Guideline 1: QNA pour informations g√©n√©rales
            guideline_qna = await agent.create_guideline(
                condition="Le patient demande des informations g√©n√©rales sur le cabinet "
                         "(horaires, √©quipe m√©dicale, tarifs, adresse, politique d'annulation, acc√®s)",
                action="Search the cabinet's FAQ knowledge base for static information",
                tools=["qna"]
            )
            print(f"   ‚úÖ Guideline QNA cr√©√©e (ID: {guideline_qna.id})")
            
            # Guideline 2: SQL pour donn√©es dynamiques
            guideline_sql = await agent.create_guideline(
                condition="Le patient demande des informations sur ses rendez-vous, "
                         "ses prescriptions, son dossier m√©dical, ou des statistiques du cabinet "
                         "(nombre de patients, disponibilit√©s des m√©decins, rendez-vous du jour, etc.)",
                action="Query the medical database to retrieve real-time information. "
                       "Explain the result in a clear, empathetic and professional way.",
                tools=["sql_query"]
            )
            print(f"   ‚úÖ Guideline SQL cr√©√©e (ID: {guideline_sql.id})")
            
            # Guideline 3: Urgence (override)
            guideline_urgence = await agent.create_guideline(
                condition="Le patient dit que c'est urgent ou d√©crit des sympt√¥mes graves "
                         "(douleurs thoraciques, difficult√©s respiratoires, saignements importants, etc.)",
                action="Demander imm√©diatement au patient d'appeler le 15 (SAMU) ou de se rendre aux urgences. "
                       "Fournir le num√©ro du cabinet (+33-1-23-45-67-89) comme alternative si moins grave."
            )
            print(f"   ‚úÖ Guideline Urgence cr√©√©e (ID: {guideline_urgence.id})")
            
            # Guideline 4: Hors sujet
            guideline_offtopic = await agent.create_guideline(
                condition="Le patient parle de sujets qui n'ont rien √† voir avec la sant√© ou le cabinet m√©dical "
                         "(politique, actualit√©s, divertissement, recettes de cuisine, etc.)",
                action="Poliment rediriger le patient vers des questions li√©es √† la sant√© ou au cabinet m√©dical"
            )
            print(f"   ‚úÖ Guideline Hors-sujet cr√©√©e (ID: {guideline_offtopic.id})")
            
            print()
            
            # === JOURNEY (OPTIONNEL) ===
            print("üó∫Ô∏è  Cr√©ation du journey de prise de rendez-vous...")
            
            journey = await agent.create_journey(
                title="Prendre Rendez-vous",
                description="Aide le patient √† prendre un rendez-vous m√©dical",
                conditions=["Le patient veut prendre rendez-vous", "Le patient souhaite consulter"]
            )
            
            # √âtats du journey
            t1 = await journey.initial_state.transition_to(
                chat_state="Demander poliment la raison de la visite (sympt√¥mes, suivi, certificat, etc.)"
            )
            
            t2 = await t1.target.transition_to(
                chat_state="Proposer d'interroger la base de donn√©es pour voir les cr√©neaux disponibles, "
                          "ou demander s'ils ont une pr√©f√©rence de m√©decin ou de jour"
            )
            
            t3 = await t2.target.transition_to(
                chat_state="Confirmer les d√©tails du rendez-vous et informer que la r√©servation sera trait√©e"
            )
            
            await t3.target.transition_to(
                chat_state="Remercier et rappeler qu'ils peuvent annuler 24h avant sans frais"
            )
            
            print(f"   ‚úÖ Journey cr√©√© (ID: {journey.id})")
            print()
            
            # === R√âSUM√â ===
            print("=" * 70)
            print("‚úÖ AGENT CONFIGUR√â AVEC SUCC√àS !")
            print("=" * 70)
            print()
            print("üìù R√©sum√© de la configuration:")
            print(f"   ‚Ä¢ Agent ID: {agent.id}")
            print(f"   ‚Ä¢ Guidelines: 4 (QNA, SQL, Urgence, Hors-sujet)")
            print(f"   ‚Ä¢ Journey: 1 (Prise de RDV)")
            print(f"   ‚Ä¢ Tools disponibles: qna, sql_query")
            print()
            print("üîß PROCHAINES √âTAPES:")
            print()
            print("1Ô∏è‚É£  Mettez √† jour chat.js avec l'Agent ID:")
            print(f"    AGENT_ID: '{agent.id}'")
            print()
            print("2Ô∏è‚É£  D√©marrez le serveur Parlant avec les modules:")
            print("    parlant-server \\")
            print("      --module parlant_qna.module \\")
            print("      --module parlant_sql.module \\")
            print("      --host 0.0.0.0 \\")
            print("      --port 8000")
            print()
            print("3Ô∏è‚É£  Chargez les donn√©es (si pas d√©j√† fait):")
            print("    ‚Ä¢ FAQ: cd ../mon_agent_medical && load_medical_faq.bat")
            print("    ‚Ä¢ SQL: cd ../parlant-sql && load_schemas.bat")
            print("    ‚Ä¢ DB:  python create_demo_database.py")
            print()
            print("4Ô∏è‚É£  Lancez le frontend:")
            print("    cd web_frontend")
            print("    python -m http.server 8080")
            print()
            print("5Ô∏è‚É£  Ouvrez le navigateur:")
            print("    http://localhost:8080")
            print()
            print("=" * 70)
            
            # Sauvegarder l'ID dans un fichier
            config_file = Path(__file__).parent / "agent_config.txt"
            with open(config_file, 'w') as f:
                f.write(f"AGENT_ID={agent.id}\n")
                f.write(f"AGENT_NAME={agent.name}\n")
                f.write(f"CREATED_AT={agent.created_at}\n")
            
            print(f"üíæ Configuration sauvegard√©e dans: {config_file}")
            print()
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'agent: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    print()
    print("=" * 70)
    print(" CONFIGURATION DE L'AGENT PARLANT POUR LE FRONTEND WEB")
    print("=" * 70)
    print()
    
    asyncio.run(create_medical_agent())

