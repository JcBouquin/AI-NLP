# 🎨 Absolument ! C'est Exactement Possible et Recommandé !

Oui, vous pouvez créer un **frontend HTML personnalisé** qui se connecte à Parlant via son **API REST/WebSocket** et utilise automatiquement les tools `qna` et `sql` via les guidelines !

## 🏗️ Architecture Complète

```
┌─────────────────────────────────────────────────────────────┐
│ FRONTEND HTML (Votre Interface Custom)                      │
│                                                              │
│  ┌──────────────────────────────────────────────────┐      │
│  │  <input id="user-message">                       │      │
│  │  <button>Envoyer</button>                        │      │
│  │                                                   │      │
│  │  Chat History:                                    │      │
│  │  👤 User: "Quels sont vos horaires ?"           │      │
│  │  🤖 Agent: "Lundi-Vendredi 8h30-19h..."         │      │
│  └──────────────────────────────────────────────────┘      │
│                                                              │
│  JavaScript: fetch() / WebSocket                            │
└────────────────────┬────────────────────────────────────────┘
                     ↓ HTTP/WebSocket
┌─────────────────────────────────────────────────────────────┐
│ PARLANT SERVER (Backend)                                    │
│ Démarré avec: parlant-server                                │
│   --module parlant_qna.module                              │
│   --module parlant_sql.module                              │
│                                                              │
│  API REST/WebSocket exposée sur http://localhost:8000      │
└────────────────────┬────────────────────────────────────────┘
                     ↓
┌─────────────────────────────────────────────────────────────┐
│ AGENT PARLANT (Logique)                                     │
│                                                              │
│  Guideline 1: "infos cabinet" → Tool: qna                  │
│  Guideline 2: "données perso" → Tool: sql_query            │
│  Journey: Prise de RDV                                      │
└─────────────────────────────────────────────────────────────┘
```

## 📝 Exemple de Frontend HTML Complet

Voici un exemple simple mais fonctionnel :

### `index.html`

```html
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Assistant Médical - Cabinet Martin</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .chat-container {
            width: 90%;
            max-width: 800px;
            height: 90vh;
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .chat-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            text-align: center;
        }

        .chat-header h1 {
            font-size: 24px;
            margin-bottom: 5px;
        }

        .chat-header p {
            font-size: 14px;
            opacity: 0.9;
        }

        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background: #f5f5f5;
        }

        .message {
            margin-bottom: 15px;
            display: flex;
            animation: fadeIn 0.3s;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .message.user {
            justify-content: flex-end;
        }

        .message-bubble {
            max-width: 70%;
            padding: 12px 18px;
            border-radius: 18px;
            word-wrap: break-word;
        }

        .message.user .message-bubble {
            background: #667eea;
            color: white;
        }

        .message.agent .message-bubble {
            background: white;
            color: #333;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .message.system .message-bubble {
            background: #fff3cd;
            color: #856404;
            font-style: italic;
            max-width: 90%;
        }

        .chat-input-container {
            padding: 20px;
            background: white;
            border-top: 1px solid #e0e0e0;
        }

        .chat-input-form {
            display: flex;
            gap: 10px;
        }

        #user-input {
            flex: 1;
            padding: 12px 15px;
            border: 2px solid #e0e0e0;
            border-radius: 25px;
            font-size: 15px;
            outline: none;
            transition: border-color 0.3s;
        }

        #user-input:focus {
            border-color: #667eea;
        }

        #send-button {
            padding: 12px 30px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 15px;
            font-weight: 600;
            transition: transform 0.2s;
        }

        #send-button:hover:not(:disabled) {
            transform: scale(1.05);
        }

        #send-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .typing-indicator {
            display: none;
            padding: 10px 15px;
            background: white;
            border-radius: 18px;
            width: fit-content;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .typing-indicator.show {
            display: block;
        }

        .typing-indicator span {
            height: 8px;
            width: 8px;
            background: #667eea;
            border-radius: 50%;
            display: inline-block;
            margin: 0 2px;
            animation: typing 1.4s infinite;
        }

        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typing {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-10px); }
        }

        .tool-indicator {
            font-size: 12px;
            color: #667eea;
            margin-top: 5px;
            font-weight: 600;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h1>🏥 Assistant Médical</h1>
            <p>Cabinet Médical Martin - Posez-moi vos questions !</p>
        </div>

        <div class="chat-messages" id="chat-messages">
            <div class="message agent">
                <div class="message-bubble">
                    👋 Bonjour ! Je suis votre assistant médical virtuel. 
                    Je peux vous aider avec :
                    <br>• Informations sur le cabinet (horaires, tarifs, équipe)
                    <br>• Vos rendez-vous et prescriptions
                    <br>• Prise de rendez-vous
                    <br><br>Comment puis-je vous aider aujourd'hui ?
                </div>
            </div>
            
            <div class="typing-indicator" id="typing-indicator">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>

        <div class="chat-input-container">
            <form class="chat-input-form" id="chat-form">
                <input 
                    type="text" 
                    id="user-input" 
                    placeholder="Tapez votre message..." 
                    autocomplete="off"
                    required
                />
                <button type="submit" id="send-button">Envoyer</button>
            </form>
        </div>
    </div>

    <script src="chat.js"></script>
</body>
</html>
```

### `chat.js`

```javascript
// Configuration
const PARLANT_API_URL = 'http://localhost:8000/api/v1';
const AGENT_ID = 'your-agent-id'; // À récupérer après création de l'agent
let sessionId = null;
let customerId = 'customer-123'; // ID du client/patient

// Éléments DOM
const chatMessages = document.getElementById('chat-messages');
const chatForm = document.getElementById('chat-form');
const userInput = document.getElementById('user-input');
const sendButton = document.getElementById('send-button');
const typingIndicator = document.getElementById('typing-indicator');

// Initialiser la session au chargement
async function initializeSession() {
    try {
        // Créer une nouvelle session
        const response = await fetch(`${PARLANT_API_URL}/agents/${AGENT_ID}/sessions`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                customer_id: customerId
            })
        });

        if (!response.ok) throw new Error('Failed to create session');
        
        const data = await response.json();
        sessionId = data.id;
        
        console.log('Session initialisée:', sessionId);
    } catch (error) {
        console.error('Erreur initialisation session:', error);
        addSystemMessage('⚠️ Erreur de connexion au serveur. Veuillez rafraîchir la page.');
    }
}

// Envoyer un message
async function sendMessage(message) {
    if (!sessionId) {
        await initializeSession();
    }

    try {
        showTypingIndicator();

        const response = await fetch(
            `${PARLANT_API_URL}/agents/${AGENT_ID}/sessions/${sessionId}/messages`,
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message,
                    kind: 'message'
                })
            }
        );

        if (!response.ok) throw new Error('Failed to send message');

        const data = await response.json();
        
        hideTypingIndicator();

        // Afficher la réponse de l'agent
        if (data.response) {
            addAgentMessage(data.response, data.tool_used);
        }

        // Afficher les événements (tools utilisés)
        if (data.events && data.events.length > 0) {
            data.events.forEach(event => {
                if (event.kind === 'tool_call') {
                    console.log('Tool appelé:', event.tool_name, event);
                }
            });
        }

    } catch (error) {
        console.error('Erreur envoi message:', error);
        hideTypingIndicator();
        addSystemMessage('❌ Erreur lors de l\'envoi du message. Réessayez.');
    }
}

// Ajouter un message utilisateur
function addUserMessage(message) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message user';
    messageDiv.innerHTML = `
        <div class="message-bubble">${escapeHtml(message)}</div>
    `;
    
    const typingIndicator = document.getElementById('typing-indicator');
    chatMessages.insertBefore(messageDiv, typingIndicator);
    scrollToBottom();
}

// Ajouter un message agent
function addAgentMessage(message, toolUsed = null) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message agent';
    
    let toolIndicator = '';
    if (toolUsed) {
        const toolIcons = {
            'qna': '📚 FAQ',
            'sql_query': '🗄️ Base de données'
        };
        toolIndicator = `<div class="tool-indicator">${toolIcons[toolUsed] || '🔧 Tool'}</div>`;
    }
    
    messageDiv.innerHTML = `
        <div class="message-bubble">
            ${formatMessage(message)}
            ${toolIndicator}
        </div>
    `;
    
    const typingIndicator = document.getElementById('typing-indicator');
    chatMessages.insertBefore(messageDiv, typingIndicator);
    scrollToBottom();
}

// Ajouter un message système
function addSystemMessage(message) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message system';
    messageDiv.innerHTML = `
        <div class="message-bubble">${escapeHtml(message)}</div>
    `;
    
    const typingIndicator = document.getElementById('typing-indicator');
    chatMessages.insertBefore(messageDiv, typingIndicator);
    scrollToBottom();
}

// Afficher l'indicateur de frappe
function showTypingIndicator() {
    typingIndicator.classList.add('show');
    scrollToBottom();
}

// Masquer l'indicateur de frappe
function hideTypingIndicator() {
    typingIndicator.classList.remove('show');
}

// Formater le message (Markdown basique)
function formatMessage(text) {
    return text
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\n/g, '<br>');
}

// Échapper HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Scroll vers le bas
function scrollToBottom() {
    setTimeout(() => {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }, 100);
}

// Gérer la soumission du formulaire
chatForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const message = userInput.value.trim();
    if (!message) return;
    
    // Ajouter le message de l'utilisateur
    addUserMessage(message);
    
    // Vider l'input
    userInput.value = '';
    
    // Désactiver le bouton pendant l'envoi
    sendButton.disabled = true;
    
    // Envoyer le message
    await sendMessage(message);
    
    // Réactiver le bouton
    sendButton.disabled = false;
    userInput.focus();
});

// Initialiser la session au chargement
window.addEventListener('load', () => {
    initializeSession();
});
```

## 🚀 Comment l'Utiliser

### 1. Démarrer Parlant avec les Modules

```bash
parlant-server \
  --module parlant_qna.module \
  --module parlant_sql.module \
  --host 0.0.0.0 \
  --port 8000
```

### 2. Créer l'Agent avec les Guidelines

```python
# setup_agent.py
import parlant.sdk as p
import asyncio

async def setup():
    async with p.Server() as server:
        agent = await server.create_agent(
            name="Assistant Médical Web",
            description="Agent accessible via interface web"
        )
        
        # Guideline QNA
        await agent.create_guideline(
            condition="Questions sur infos générales du cabinet",
            tools=["qna"]
        )
        
        # Guideline SQL
        await agent.create_guideline(
            condition="Questions sur données personnelles ou statistiques",
            tools=["sql_query"]
        )
        
        print(f"✅ Agent créé avec ID: {agent.id}")
        print(f"📋 Copiez cet ID dans chat.js (ligne 3)")

asyncio.run(setup())
```

### 3. Ouvrir le Frontend

```bash
# Servir les fichiers HTML (simple HTTP server)
python -m http.server 8080

# Ouvrir le navigateur
# http://localhost:8080
```

## 🔄 Flux Complet

```
1. User tape: "Quels sont vos horaires ?"
   ↓
2. Frontend → POST /agents/{id}/sessions/{session_id}/messages
   ↓
3. Parlant Agent évalue les guidelines
   → Condition "infos générales" → ✅ Match !
   ↓
4. Parlant appelle automatiquement tool "qna"
   → Recherche dans parlant-qna-db.json
   → Trouve: "Lundi-Vendredi 8h30-19h..."
   ↓
5. Parlant retourne la réponse
   ↓
6. Frontend affiche avec badge "📚 FAQ"
```

```
1. User tape: "Combien de rendez-vous ai-je ce mois ?"
   ↓
2. Frontend → POST /agents/{id}/sessions/{session_id}/messages
   ↓
3. Parlant Agent évalue les guidelines
   → Condition "données personnelles" → ✅ Match !
   ↓
4. Parlant appelle automatiquement tool "sql_query"
   → Génère SQL: SELECT COUNT(*) FROM appointments WHERE...
   → Exécute sur medical_database.db
   → Résultat: 3
   ↓
5. Parlant retourne "Vous avez 3 rendez-vous ce mois"
   ↓
6. Frontend affiche avec badge "🗄️ Base de données"
```

## 🎨 Personnalisations Possibles

### Ajouter un indicateur de tool utilisé

```javascript
// Dans addAgentMessage()
const toolIcons = {
    'qna': '📚 Réponse FAQ',
    'sql_query': '🗄️ Données en temps réel',
    'get_upcoming_slots': '📅 Créneaux disponibles'
};
```

### WebSocket pour temps réel

```javascript
const ws = new WebSocket('ws://localhost:8000/ws/agents/${AGENT_ID}/sessions/${sessionId}');

ws.onmessage = (event) => {
    const data = JSON.parse(event.data);
    if (data.type === 'agent_message') {
        addAgentMessage(data.message);
    }
};
```

### Authentification utilisateur

```javascript
// Ajouter un token JWT
headers: {
    'Authorization': `Bearer ${userToken}`,
    'Content-Type': 'application/json'
}
```

## ✅ Avantages de Cette Approche

| Aspect | Avantage |
|--------|----------|
| **Séparation** | Frontend découplé du backend |
| **Flexibilité** | N'importe quel framework (React, Vue, vanilla) |
| **Tools automatiques** | QNA et SQL appelés via guidelines |
| **Scalabilité** | Plusieurs frontends, un backend |
| **Personnalisation** | Design 100% custom |

## 🎯 Résumé

**OUI, c'est totalement possible !** Le frontend HTML n'a qu'à :
1. **Envoyer** les messages via l'API Parlant
2. **Recevoir** les réponses
3. **Afficher** le résultat

**Parlant gère automatiquement** :
- L'évaluation des guidelines
- L'appel des tools (`qna`, `sql_query`)
- La génération des réponses

Vous avez juste à créer une belle interface ! 🎨